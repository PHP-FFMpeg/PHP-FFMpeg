var search_data = {
    'index': {
        'searchIndex': ["ffmpeg","ffmpeg\\coordinate","ffmpeg\\driver","ffmpeg\\exception","ffmpeg\\ffprobe","ffmpeg\\ffprobe\\datamapping","ffmpeg\\filters","ffmpeg\\filters\\audio","ffmpeg\\filters\\frame","ffmpeg\\filters\\video","ffmpeg\\format","ffmpeg\\format\\audio","ffmpeg\\format\\progresslistener","ffmpeg\\format\\video","ffmpeg\\media","ffmpeg\\coordinate\\aspectratio","ffmpeg\\coordinate\\dimension","ffmpeg\\coordinate\\framerate","ffmpeg\\coordinate\\point","ffmpeg\\coordinate\\timecode","ffmpeg\\driver\\ffmpegdriver","ffmpeg\\driver\\ffprobedriver","ffmpeg\\exception\\exceptioninterface","ffmpeg\\exception\\executablenotfoundexception","ffmpeg\\exception\\invalidargumentexception","ffmpeg\\exception\\logicexception","ffmpeg\\exception\\runtimeexception","ffmpeg\\ffmpeg","ffmpeg\\ffmpegserviceprovider","ffmpeg\\ffprobe","ffmpeg\\ffprobe\\datamapping\\abstractdata","ffmpeg\\ffprobe\\datamapping\\format","ffmpeg\\ffprobe\\datamapping\\stream","ffmpeg\\ffprobe\\datamapping\\streamcollection","ffmpeg\\ffprobe\\mapper","ffmpeg\\ffprobe\\mapperinterface","ffmpeg\\ffprobe\\optionstester","ffmpeg\\ffprobe\\optionstesterinterface","ffmpeg\\ffprobe\\outputparser","ffmpeg\\ffprobe\\outputparserinterface","ffmpeg\\filters\\audio\\audiofilterinterface","ffmpeg\\filters\\audio\\audiofilters","ffmpeg\\filters\\audio\\audioresamplablefilter","ffmpeg\\filters\\audio\\simplefilter","ffmpeg\\filters\\filterinterface","ffmpeg\\filters\\filterscollection","ffmpeg\\filters\\frame\\displayratiofixerfilter","ffmpeg\\filters\\frame\\framefilterinterface","ffmpeg\\filters\\frame\\framefilters","ffmpeg\\filters\\video\\clipfilter","ffmpeg\\filters\\video\\customfilter","ffmpeg\\filters\\video\\frameratefilter","ffmpeg\\filters\\video\\resizefilter","ffmpeg\\filters\\video\\rotatefilter","ffmpeg\\filters\\video\\synchronizefilter","ffmpeg\\filters\\video\\videofilterinterface","ffmpeg\\filters\\video\\videofilters","ffmpeg\\filters\\video\\watermarkfilter","ffmpeg\\format\\audiointerface","ffmpeg\\format\\audio\\aac","ffmpeg\\format\\audio\\defaultaudio","ffmpeg\\format\\audio\\flac","ffmpeg\\format\\audio\\mp3","ffmpeg\\format\\audio\\vorbis","ffmpeg\\format\\audio\\wav","ffmpeg\\format\\formatinterface","ffmpeg\\format\\frameinterface","ffmpeg\\format\\progresslistener\\abstractprogresslistener","ffmpeg\\format\\progresslistener\\audioprogresslistener","ffmpeg\\format\\progresslistener\\videoprogresslistener","ffmpeg\\format\\progressableinterface","ffmpeg\\format\\videointerface","ffmpeg\\format\\video\\defaultvideo","ffmpeg\\format\\video\\ogg","ffmpeg\\format\\video\\wmv","ffmpeg\\format\\video\\wmv3","ffmpeg\\format\\video\\webm","ffmpeg\\format\\video\\x264","ffmpeg\\media\\abstractmediatype","ffmpeg\\media\\abstractstreamablemedia","ffmpeg\\media\\audio","ffmpeg\\media\\frame","ffmpeg\\media\\mediatypeinterface","ffmpeg\\media\\video","ffmpeg\\coordinate\\aspectratio::__construct","ffmpeg\\coordinate\\aspectratio::getvalue","ffmpeg\\coordinate\\aspectratio::calculatewidth","ffmpeg\\coordinate\\aspectratio::calculateheight","ffmpeg\\coordinate\\aspectratio::create","ffmpeg\\coordinate\\dimension::__construct","ffmpeg\\coordinate\\dimension::getwidth","ffmpeg\\coordinate\\dimension::getheight","ffmpeg\\coordinate\\dimension::getratio","ffmpeg\\coordinate\\framerate::__construct","ffmpeg\\coordinate\\framerate::getvalue","ffmpeg\\coordinate\\point::__construct","ffmpeg\\coordinate\\point::getx","ffmpeg\\coordinate\\point::gety","ffmpeg\\coordinate\\timecode::__construct","ffmpeg\\coordinate\\timecode::__tostring","ffmpeg\\coordinate\\timecode::fromstring","ffmpeg\\coordinate\\timecode::fromseconds","ffmpeg\\driver\\ffmpegdriver::getname","ffmpeg\\driver\\ffmpegdriver::create","ffmpeg\\driver\\ffprobedriver::getname","ffmpeg\\driver\\ffprobedriver::create","ffmpeg\\ffmpeg::__construct","ffmpeg\\ffmpeg::setffprobe","ffmpeg\\ffmpeg::getffprobe","ffmpeg\\ffmpeg::setffmpegdriver","ffmpeg\\ffmpeg::getffmpegdriver","ffmpeg\\ffmpeg::open","ffmpeg\\ffmpeg::create","ffmpeg\\ffmpegserviceprovider::register","ffmpeg\\ffmpegserviceprovider::boot","ffmpeg\\ffprobe::__construct","ffmpeg\\ffprobe::getparser","ffmpeg\\ffprobe::setparser","ffmpeg\\ffprobe::getffprobedriver","ffmpeg\\ffprobe::setffprobedriver","ffmpeg\\ffprobe::setoptionstester","ffmpeg\\ffprobe::getoptionstester","ffmpeg\\ffprobe::setcache","ffmpeg\\ffprobe::getcache","ffmpeg\\ffprobe::getmapper","ffmpeg\\ffprobe::setmapper","ffmpeg\\ffprobe::format","ffmpeg\\ffprobe::streams","ffmpeg\\ffprobe::create","ffmpeg\\ffprobe\\datamapping\\abstractdata::__construct","ffmpeg\\ffprobe\\datamapping\\abstractdata::has","ffmpeg\\ffprobe\\datamapping\\abstractdata::get","ffmpeg\\ffprobe\\datamapping\\abstractdata::set","ffmpeg\\ffprobe\\datamapping\\abstractdata::keys","ffmpeg\\ffprobe\\datamapping\\abstractdata::all","ffmpeg\\ffprobe\\datamapping\\abstractdata::count","ffmpeg\\ffprobe\\datamapping\\stream::isaudio","ffmpeg\\ffprobe\\datamapping\\stream::isvideo","ffmpeg\\ffprobe\\datamapping\\stream::getdimensions","ffmpeg\\ffprobe\\datamapping\\streamcollection::__construct","ffmpeg\\ffprobe\\datamapping\\streamcollection::first","ffmpeg\\ffprobe\\datamapping\\streamcollection::add","ffmpeg\\ffprobe\\datamapping\\streamcollection::videos","ffmpeg\\ffprobe\\datamapping\\streamcollection::audios","ffmpeg\\ffprobe\\datamapping\\streamcollection::count","ffmpeg\\ffprobe\\datamapping\\streamcollection::all","ffmpeg\\ffprobe\\datamapping\\streamcollection::getiterator","ffmpeg\\ffprobe\\mapper::map","ffmpeg\\ffprobe\\mapperinterface::map","ffmpeg\\ffprobe\\optionstester::__construct","ffmpeg\\ffprobe\\optionstester::has","ffmpeg\\ffprobe\\optionstesterinterface::has","ffmpeg\\ffprobe\\outputparser::parse","ffmpeg\\ffprobe\\outputparserinterface::parse","ffmpeg\\filters\\audio\\audiofilterinterface::apply","ffmpeg\\filters\\audio\\audiofilters::__construct","ffmpeg\\filters\\audio\\audiofilters::resample","ffmpeg\\filters\\audio\\audioresamplablefilter::__construct","ffmpeg\\filters\\audio\\audioresamplablefilter::getpriority","ffmpeg\\filters\\audio\\audioresamplablefilter::getrate","ffmpeg\\filters\\audio\\audioresamplablefilter::apply","ffmpeg\\filters\\audio\\simplefilter::__construct","ffmpeg\\filters\\audio\\simplefilter::getpriority","ffmpeg\\filters\\audio\\simplefilter::apply","ffmpeg\\filters\\filterinterface::getpriority","ffmpeg\\filters\\filterscollection::add","ffmpeg\\filters\\filterscollection::count","ffmpeg\\filters\\filterscollection::getiterator","ffmpeg\\filters\\frame\\displayratiofixerfilter::__construct","ffmpeg\\filters\\frame\\displayratiofixerfilter::getpriority","ffmpeg\\filters\\frame\\displayratiofixerfilter::apply","ffmpeg\\filters\\frame\\framefilterinterface::apply","ffmpeg\\filters\\frame\\framefilters::__construct","ffmpeg\\filters\\frame\\framefilters::fixdisplayratio","ffmpeg\\filters\\video\\clipfilter::__construct","ffmpeg\\filters\\video\\clipfilter::getpriority","ffmpeg\\filters\\video\\clipfilter::getstart","ffmpeg\\filters\\video\\clipfilter::getduration","ffmpeg\\filters\\video\\clipfilter::apply","ffmpeg\\filters\\video\\customfilter::__construct","ffmpeg\\filters\\video\\customfilter::getpriority","ffmpeg\\filters\\video\\customfilter::apply","ffmpeg\\filters\\video\\frameratefilter::__construct","ffmpeg\\filters\\video\\frameratefilter::getpriority","ffmpeg\\filters\\video\\frameratefilter::getframerate","ffmpeg\\filters\\video\\frameratefilter::getgop","ffmpeg\\filters\\video\\frameratefilter::apply","ffmpeg\\filters\\video\\resizefilter::__construct","ffmpeg\\filters\\video\\resizefilter::getpriority","ffmpeg\\filters\\video\\resizefilter::getdimension","ffmpeg\\filters\\video\\resizefilter::getmode","ffmpeg\\filters\\video\\resizefilter::arestandardsforced","ffmpeg\\filters\\video\\resizefilter::apply","ffmpeg\\filters\\video\\rotatefilter::__construct","ffmpeg\\filters\\video\\rotatefilter::getpriority","ffmpeg\\filters\\video\\rotatefilter::getangle","ffmpeg\\filters\\video\\rotatefilter::apply","ffmpeg\\filters\\video\\synchronizefilter::__construct","ffmpeg\\filters\\video\\synchronizefilter::getpriority","ffmpeg\\filters\\video\\synchronizefilter::apply","ffmpeg\\filters\\video\\videofilterinterface::apply","ffmpeg\\filters\\video\\videofilters::__construct","ffmpeg\\filters\\video\\videofilters::resize","ffmpeg\\filters\\video\\videofilters::framerate","ffmpeg\\filters\\video\\videofilters::synchronize","ffmpeg\\filters\\video\\videofilters::clip","ffmpeg\\filters\\video\\videofilters::audioresample","ffmpeg\\filters\\video\\videofilters::rotate","ffmpeg\\filters\\video\\videofilters::watermark","ffmpeg\\filters\\video\\watermarkfilter::__construct","ffmpeg\\filters\\video\\watermarkfilter::getpriority","ffmpeg\\filters\\video\\watermarkfilter::apply","ffmpeg\\format\\audiointerface::getaudiokilobitrate","ffmpeg\\format\\audiointerface::getaudiochannels","ffmpeg\\format\\audiointerface::getaudiocodec","ffmpeg\\format\\audiointerface::getavailableaudiocodecs","ffmpeg\\format\\audio\\aac::__construct","ffmpeg\\format\\audio\\aac::getavailableaudiocodecs","ffmpeg\\format\\audio\\defaultaudio::getextraparams","ffmpeg\\format\\audio\\defaultaudio::getaudiocodec","ffmpeg\\format\\audio\\defaultaudio::setaudiocodec","ffmpeg\\format\\audio\\defaultaudio::getaudiokilobitrate","ffmpeg\\format\\audio\\defaultaudio::setaudiokilobitrate","ffmpeg\\format\\audio\\defaultaudio::getaudiochannels","ffmpeg\\format\\audio\\defaultaudio::setaudiochannels","ffmpeg\\format\\audio\\defaultaudio::createprogresslistener","ffmpeg\\format\\audio\\defaultaudio::getpasses","ffmpeg\\format\\audio\\flac::__construct","ffmpeg\\format\\audio\\flac::getavailableaudiocodecs","ffmpeg\\format\\audio\\mp3::__construct","ffmpeg\\format\\audio\\mp3::getavailableaudiocodecs","ffmpeg\\format\\audio\\vorbis::__construct","ffmpeg\\format\\audio\\vorbis::getextraparams","ffmpeg\\format\\audio\\vorbis::getavailableaudiocodecs","ffmpeg\\format\\audio\\wav::__construct","ffmpeg\\format\\audio\\wav::getavailableaudiocodecs","ffmpeg\\format\\formatinterface::getpasses","ffmpeg\\format\\formatinterface::getextraparams","ffmpeg\\format\\progresslistener\\abstractprogresslistener::__construct","ffmpeg\\format\\progresslistener\\abstractprogresslistener::getffprobe","ffmpeg\\format\\progresslistener\\abstractprogresslistener::getpathfile","ffmpeg\\format\\progresslistener\\abstractprogresslistener::getcurrentpass","ffmpeg\\format\\progresslistener\\abstractprogresslistener::gettotalpass","ffmpeg\\format\\progresslistener\\abstractprogresslistener::handle","ffmpeg\\format\\progresslistener\\abstractprogresslistener::forwardedevents","ffmpeg\\format\\progresslistener\\audioprogresslistener::getpattern","ffmpeg\\format\\progresslistener\\videoprogresslistener::getpattern","ffmpeg\\format\\progressableinterface::createprogresslistener","ffmpeg\\format\\videointerface::getkilobitrate","ffmpeg\\format\\videointerface::getmodulus","ffmpeg\\format\\videointerface::getvideocodec","ffmpeg\\format\\videointerface::supportbframes","ffmpeg\\format\\videointerface::getavailablevideocodecs","ffmpeg\\format\\video\\defaultvideo::getkilobitrate","ffmpeg\\format\\video\\defaultvideo::setkilobitrate","ffmpeg\\format\\video\\defaultvideo::getvideocodec","ffmpeg\\format\\video\\defaultvideo::setvideocodec","ffmpeg\\format\\video\\defaultvideo::getmodulus","ffmpeg\\format\\video\\defaultvideo::createprogresslistener","ffmpeg\\format\\video\\ogg::__construct","ffmpeg\\format\\video\\ogg::supportbframes","ffmpeg\\format\\video\\ogg::getavailableaudiocodecs","ffmpeg\\format\\video\\ogg::getavailablevideocodecs","ffmpeg\\format\\video\\wmv::__construct","ffmpeg\\format\\video\\wmv::supportbframes","ffmpeg\\format\\video\\wmv::getavailableaudiocodecs","ffmpeg\\format\\video\\wmv::getavailablevideocodecs","ffmpeg\\format\\video\\wmv3::__construct","ffmpeg\\format\\video\\wmv3::supportbframes","ffmpeg\\format\\video\\wmv3::getavailableaudiocodecs","ffmpeg\\format\\video\\wmv3::getavailablevideocodecs","ffmpeg\\format\\video\\webm::__construct","ffmpeg\\format\\video\\webm::supportbframes","ffmpeg\\format\\video\\webm::getextraparams","ffmpeg\\format\\video\\webm::getavailableaudiocodecs","ffmpeg\\format\\video\\webm::getavailablevideocodecs","ffmpeg\\format\\video\\x264::__construct","ffmpeg\\format\\video\\x264::supportbframes","ffmpeg\\format\\video\\x264::setbframessupport","ffmpeg\\format\\video\\x264::getavailableaudiocodecs","ffmpeg\\format\\video\\x264::getavailablevideocodecs","ffmpeg\\format\\video\\x264::getpasses","ffmpeg\\format\\video\\x264::getmodulus","ffmpeg\\media\\abstractmediatype::__construct","ffmpeg\\media\\abstractmediatype::getffmpegdriver","ffmpeg\\media\\abstractmediatype::setffmpegdriver","ffmpeg\\media\\abstractmediatype::getffprobe","ffmpeg\\media\\abstractmediatype::setffprobe","ffmpeg\\media\\abstractmediatype::getpathfile","ffmpeg\\media\\abstractmediatype::setfilterscollection","ffmpeg\\media\\abstractmediatype::getfilterscollection","ffmpeg\\media\\abstractstreamablemedia::getstreams","ffmpeg\\media\\abstractstreamablemedia::getformat","ffmpeg\\media\\audio::filters","ffmpeg\\media\\audio::addfilter","ffmpeg\\media\\audio::save","ffmpeg\\media\\frame::__construct","ffmpeg\\media\\frame::getvideo","ffmpeg\\media\\frame::filters","ffmpeg\\media\\frame::addfilter","ffmpeg\\media\\frame::gettimecode","ffmpeg\\media\\frame::save","ffmpeg\\media\\mediatypeinterface::filters","ffmpeg\\media\\mediatypeinterface::getpathfile","ffmpeg\\media\\video::filters","ffmpeg\\media\\video::addfilter","ffmpeg\\media\\video::save","ffmpeg\\media\\video::frame"],
        'info': [["FFMpeg","","FFMpeg.html","","",3],["FFMpeg\\Coordinate","","FFMpeg\/Coordinate.html","","",3],["FFMpeg\\Driver","","FFMpeg\/Driver.html","","",3],["FFMpeg\\Exception","","FFMpeg\/Exception.html","","",3],["FFMpeg\\FFProbe","","FFMpeg\/FFProbe.html","","",3],["FFMpeg\\FFProbe\\DataMapping","","FFMpeg\/FFProbe\/DataMapping.html","","",3],["FFMpeg\\Filters","","FFMpeg\/Filters.html","","",3],["FFMpeg\\Filters\\Audio","","FFMpeg\/Filters\/Audio.html","","",3],["FFMpeg\\Filters\\Frame","","FFMpeg\/Filters\/Frame.html","","",3],["FFMpeg\\Filters\\Video","","FFMpeg\/Filters\/Video.html","","",3],["FFMpeg\\Format","","FFMpeg\/Format.html","","",3],["FFMpeg\\Format\\Audio","","FFMpeg\/Format\/Audio.html","","",3],["FFMpeg\\Format\\ProgressListener","","FFMpeg\/Format\/ProgressListener.html","","",3],["FFMpeg\\Format\\Video","","FFMpeg\/Format\/Video.html","","",3],["FFMpeg\\Media","","FFMpeg\/Media.html","","",3],["AspectRatio","FFMpeg\\Coordinate","FFMpeg\/Coordinate\/AspectRatio.html","","",1],["Dimension","FFMpeg\\Coordinate","FFMpeg\/Coordinate\/Dimension.html","","Dimension object, used for manipulating width and height",1],["FrameRate","FFMpeg\\Coordinate","FFMpeg\/Coordinate\/FrameRate.html","","",1],["Point","FFMpeg\\Coordinate","FFMpeg\/Coordinate\/Point.html","","",1],["TimeCode","FFMpeg\\Coordinate","FFMpeg\/Coordinate\/TimeCode.html","","",1],["FFMpegDriver","FFMpeg\\Driver","FFMpeg\/Driver\/FFMpegDriver.html"," < AbstractBinary","",1],["FFProbeDriver","FFMpeg\\Driver","FFMpeg\/Driver\/FFProbeDriver.html"," < AbstractBinary","",1],["ExceptionInterface","FFMpeg\\Exception","FFMpeg\/Exception\/ExceptionInterface.html","","",1],["ExecutableNotFoundException","FFMpeg\\Exception","FFMpeg\/Exception\/ExecutableNotFoundException.html"," < RuntimeException","",1],["InvalidArgumentException","FFMpeg\\Exception","FFMpeg\/Exception\/InvalidArgumentException.html"," < InvalidArgumentException","",1],["LogicException","FFMpeg\\Exception","FFMpeg\/Exception\/LogicException.html"," < LogicException","",1],["RuntimeException","FFMpeg\\Exception","FFMpeg\/Exception\/RuntimeException.html"," < RuntimeException","",1],["FFMpeg","FFMpeg","FFMpeg\/FFMpeg.html","","",1],["FFMpegServiceProvider","FFMpeg","FFMpeg\/FFMpegServiceProvider.html","","",1],["FFProbe","FFMpeg","FFMpeg\/FFProbe.html","","",1],["AbstractData","FFMpeg\\FFProbe\\DataMapping","FFMpeg\/FFProbe\/DataMapping\/AbstractData.html","","",1],["Format","FFMpeg\\FFProbe\\DataMapping","FFMpeg\/FFProbe\/DataMapping\/Format.html"," < AbstractData","",1],["Stream","FFMpeg\\FFProbe\\DataMapping","FFMpeg\/FFProbe\/DataMapping\/Stream.html"," < AbstractData","",1],["StreamCollection","FFMpeg\\FFProbe\\DataMapping","FFMpeg\/FFProbe\/DataMapping\/StreamCollection.html","","",1],["Mapper","FFMpeg\\FFProbe","FFMpeg\/FFProbe\/Mapper.html","","",1],["MapperInterface","FFMpeg\\FFProbe","FFMpeg\/FFProbe\/MapperInterface.html","","",1],["OptionsTester","FFMpeg\\FFProbe","FFMpeg\/FFProbe\/OptionsTester.html","","",1],["OptionsTesterInterface","FFMpeg\\FFProbe","FFMpeg\/FFProbe\/OptionsTesterInterface.html","","",1],["OutputParser","FFMpeg\\FFProbe","FFMpeg\/FFProbe\/OutputParser.html","","",1],["OutputParserInterface","FFMpeg\\FFProbe","FFMpeg\/FFProbe\/OutputParserInterface.html","","",1],["AudioFilterInterface","FFMpeg\\Filters\\Audio","FFMpeg\/Filters\/Audio\/AudioFilterInterface.html","","",1],["AudioFilters","FFMpeg\\Filters\\Audio","FFMpeg\/Filters\/Audio\/AudioFilters.html","","",1],["AudioResamplableFilter","FFMpeg\\Filters\\Audio","FFMpeg\/Filters\/Audio\/AudioResamplableFilter.html","","",1],["SimpleFilter","FFMpeg\\Filters\\Audio","FFMpeg\/Filters\/Audio\/SimpleFilter.html","","",1],["FilterInterface","FFMpeg\\Filters","FFMpeg\/Filters\/FilterInterface.html","","",1],["FiltersCollection","FFMpeg\\Filters","FFMpeg\/Filters\/FiltersCollection.html","","",1],["DisplayRatioFixerFilter","FFMpeg\\Filters\\Frame","FFMpeg\/Filters\/Frame\/DisplayRatioFixerFilter.html","","",1],["FrameFilterInterface","FFMpeg\\Filters\\Frame","FFMpeg\/Filters\/Frame\/FrameFilterInterface.html","","",1],["FrameFilters","FFMpeg\\Filters\\Frame","FFMpeg\/Filters\/Frame\/FrameFilters.html","","",1],["ClipFilter","FFMpeg\\Filters\\Video","FFMpeg\/Filters\/Video\/ClipFilter.html","","",1],["CustomFilter","FFMpeg\\Filters\\Video","FFMpeg\/Filters\/Video\/CustomFilter.html","","",1],["FrameRateFilter","FFMpeg\\Filters\\Video","FFMpeg\/Filters\/Video\/FrameRateFilter.html","","",1],["ResizeFilter","FFMpeg\\Filters\\Video","FFMpeg\/Filters\/Video\/ResizeFilter.html","","",1],["RotateFilter","FFMpeg\\Filters\\Video","FFMpeg\/Filters\/Video\/RotateFilter.html","","",1],["SynchronizeFilter","FFMpeg\\Filters\\Video","FFMpeg\/Filters\/Video\/SynchronizeFilter.html","","Synchronizes audio and video in case of desynchronized",1],["VideoFilterInterface","FFMpeg\\Filters\\Video","FFMpeg\/Filters\/Video\/VideoFilterInterface.html","","",1],["VideoFilters","FFMpeg\\Filters\\Video","FFMpeg\/Filters\/Video\/VideoFilters.html"," < AudioFilters","",1],["WatermarkFilter","FFMpeg\\Filters\\Video","FFMpeg\/Filters\/Video\/WatermarkFilter.html","","",1],["AudioInterface","FFMpeg\\Format","FFMpeg\/Format\/AudioInterface.html","","",1],["Aac","FFMpeg\\Format\\Audio","FFMpeg\/Format\/Audio\/Aac.html"," < DefaultAudio","The AAC audio format",1],["DefaultAudio","FFMpeg\\Format\\Audio","FFMpeg\/Format\/Audio\/DefaultAudio.html"," < EventEmitter","",1],["Flac","FFMpeg\\Format\\Audio","FFMpeg\/Format\/Audio\/Flac.html"," < DefaultAudio","The Flac audio format",1],["Mp3","FFMpeg\\Format\\Audio","FFMpeg\/Format\/Audio\/Mp3.html"," < DefaultAudio","The MP3 audio format",1],["Vorbis","FFMpeg\\Format\\Audio","FFMpeg\/Format\/Audio\/Vorbis.html"," < DefaultAudio","The Vorbis audio format",1],["Wav","FFMpeg\\Format\\Audio","FFMpeg\/Format\/Audio\/Wav.html"," < DefaultAudio","The WAV audio format",1],["FormatInterface","FFMpeg\\Format","FFMpeg\/Format\/FormatInterface.html","","",1],["FrameInterface","FFMpeg\\Format","FFMpeg\/Format\/FrameInterface.html","","",1],["AbstractProgressListener","FFMpeg\\Format\\ProgressListener","FFMpeg\/Format\/ProgressListener\/AbstractProgressListener.html"," < EventEmitter","",1],["AudioProgressListener","FFMpeg\\Format\\ProgressListener","FFMpeg\/Format\/ProgressListener\/AudioProgressListener.html"," < AbstractProgressListener","Parses ffmpeg stderr progress information.",1],["VideoProgressListener","FFMpeg\\Format\\ProgressListener","FFMpeg\/Format\/ProgressListener\/VideoProgressListener.html"," < AbstractProgressListener","Parses ffmpeg stderr progress information for video",1],["ProgressableInterface","FFMpeg\\Format","FFMpeg\/Format\/ProgressableInterface.html","","",1],["VideoInterface","FFMpeg\\Format","FFMpeg\/Format\/VideoInterface.html","","",1],["DefaultVideo","FFMpeg\\Format\\Video","FFMpeg\/Format\/Video\/DefaultVideo.html"," < DefaultAudio","The abstract default Video format",1],["Ogg","FFMpeg\\Format\\Video","FFMpeg\/Format\/Video\/Ogg.html"," < DefaultVideo","The Ogg video format",1],["WMV","FFMpeg\\Format\\Video","FFMpeg\/Format\/Video\/WMV.html"," < DefaultVideo","The WMV video format",1],["WMV3","FFMpeg\\Format\\Video","FFMpeg\/Format\/Video\/WMV3.html"," < DefaultVideo","The WMV video format",1],["WebM","FFMpeg\\Format\\Video","FFMpeg\/Format\/Video\/WebM.html"," < DefaultVideo","The WebM video format",1],["X264","FFMpeg\\Format\\Video","FFMpeg\/Format\/Video\/X264.html"," < DefaultVideo","The X264 video format",1],["AbstractMediaType","FFMpeg\\Media","FFMpeg\/Media\/AbstractMediaType.html","","",1],["AbstractStreamableMedia","FFMpeg\\Media","FFMpeg\/Media\/AbstractStreamableMedia.html"," < AbstractMediaType","",1],["Audio","FFMpeg\\Media","FFMpeg\/Media\/Audio.html"," < AbstractStreamableMedia","",1],["Frame","FFMpeg\\Media","FFMpeg\/Media\/Frame.html"," < AbstractMediaType","",1],["MediaTypeInterface","FFMpeg\\Media","FFMpeg\/Media\/MediaTypeInterface.html","","",1],["Video","FFMpeg\\Media","FFMpeg\/Media\/Video.html"," < Audio","",1],["AspectRatio::__construct","FFMpeg\\Coordinate\\AspectRatio","FFMpeg\/Coordinate\/AspectRatio.html#method___construct","($ratio)","",2],["AspectRatio::getValue","FFMpeg\\Coordinate\\AspectRatio","FFMpeg\/Coordinate\/AspectRatio.html#method_getValue","()","Returns the value of the ratio.",2],["AspectRatio::calculateWidth","FFMpeg\\Coordinate\\AspectRatio","FFMpeg\/Coordinate\/AspectRatio.html#method_calculateWidth","(Integer $height, Integer $modulus = 1)","Computes the best width for given height and modulus.",2],["AspectRatio::calculateHeight","FFMpeg\\Coordinate\\AspectRatio","FFMpeg\/Coordinate\/AspectRatio.html#method_calculateHeight","(Integer $width, Integer $modulus = 1)","Computes the best height for given width and modulus.",2],["AspectRatio::create","FFMpeg\\Coordinate\\AspectRatio","FFMpeg\/Coordinate\/AspectRatio.html#method_create","(<a href=\"FFMpeg\/Coordinate\/Dimension.html\"><abbr title=\"FFMpeg\\Coordinate\\Dimension\">Dimension<\/abbr><\/a> $dimension, Boolean $forceStandards = true)","Creates a ratio based on Dimension.",2],["Dimension::__construct","FFMpeg\\Coordinate\\Dimension","FFMpeg\/Coordinate\/Dimension.html#method___construct","(integer $width, integer $height)","",2],["Dimension::getWidth","FFMpeg\\Coordinate\\Dimension","FFMpeg\/Coordinate\/Dimension.html#method_getWidth","()","Returns width.",2],["Dimension::getHeight","FFMpeg\\Coordinate\\Dimension","FFMpeg\/Coordinate\/Dimension.html#method_getHeight","()","Returns height.",2],["Dimension::getRatio","FFMpeg\\Coordinate\\Dimension","FFMpeg\/Coordinate\/Dimension.html#method_getRatio","(<abbr title=\"FFMpeg\\Coordinate\\type\">type<\/abbr> $forceStandards = true)","Returns the ratio.",2],["FrameRate::__construct","FFMpeg\\Coordinate\\FrameRate","FFMpeg\/Coordinate\/FrameRate.html#method___construct","($value)","",2],["FrameRate::getValue","FFMpeg\\Coordinate\\FrameRate","FFMpeg\/Coordinate\/FrameRate.html#method_getValue","()","",2],["Point::__construct","FFMpeg\\Coordinate\\Point","FFMpeg\/Coordinate\/Point.html#method___construct","($x, $y)","",2],["Point::getX","FFMpeg\\Coordinate\\Point","FFMpeg\/Coordinate\/Point.html#method_getX","()","",2],["Point::getY","FFMpeg\\Coordinate\\Point","FFMpeg\/Coordinate\/Point.html#method_getY","()","",2],["TimeCode::__construct","FFMpeg\\Coordinate\\TimeCode","FFMpeg\/Coordinate\/TimeCode.html#method___construct","($hours, $minutes, $seconds, $frames)","",2],["TimeCode::__toString","FFMpeg\\Coordinate\\TimeCode","FFMpeg\/Coordinate\/TimeCode.html#method___toString","()","",2],["TimeCode::fromString","FFMpeg\\Coordinate\\TimeCode","FFMpeg\/Coordinate\/TimeCode.html#method_fromString","(string $timecode)","Creates timecode from string.",2],["TimeCode::fromSeconds","FFMpeg\\Coordinate\\TimeCode","FFMpeg\/Coordinate\/TimeCode.html#method_fromSeconds","(float $quantity)","Creates timecode from number of seconds.",2],["FFMpegDriver::getName","FFMpeg\\Driver\\FFMpegDriver","FFMpeg\/Driver\/FFMpegDriver.html#method_getName","()","{@inheritdoc}",2],["FFMpegDriver::create","FFMpeg\\Driver\\FFMpegDriver","FFMpeg\/Driver\/FFMpegDriver.html#method_create","(<abbr title=\"Psr\\Log\\LoggerInterface\">LoggerInterface<\/abbr> $logger = null, array|<abbr title=\"Alchemy\\BinaryDriver\\Configuration\">Configuration<\/abbr> $configuration = array())","Creates an FFMpegDriver.",2],["FFProbeDriver::getName","FFMpeg\\Driver\\FFProbeDriver","FFMpeg\/Driver\/FFProbeDriver.html#method_getName","()","{@inheritdoc}",2],["FFProbeDriver::create","FFMpeg\\Driver\\FFProbeDriver","FFMpeg\/Driver\/FFProbeDriver.html#method_create","(array|<abbr title=\"Alchemy\\BinaryDriver\\ConfigurationInterface\">ConfigurationInterface<\/abbr> $configuration, <abbr title=\"Psr\\Log\\LoggerInterface\">LoggerInterface<\/abbr> $logger = null)","Creates an FFProbeDriver.",2],["FFMpeg::__construct","FFMpeg\\FFMpeg","FFMpeg\/FFMpeg.html#method___construct","(<a href=\"FFMpeg\/Driver\/FFMpegDriver.html\"><abbr title=\"FFMpeg\\Driver\\FFMpegDriver\">FFMpegDriver<\/abbr><\/a> $ffmpeg, <a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $ffprobe)","",2],["FFMpeg::setFFProbe","FFMpeg\\FFMpeg","FFMpeg\/FFMpeg.html#method_setFFProbe","(<a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $ffprobe)","Sets FFProbe.",2],["FFMpeg::getFFProbe","FFMpeg\\FFMpeg","FFMpeg\/FFMpeg.html#method_getFFProbe","()","Gets FFProbe.",2],["FFMpeg::setFFMpegDriver","FFMpeg\\FFMpeg","FFMpeg\/FFMpeg.html#method_setFFMpegDriver","(<a href=\"FFMpeg\/Driver\/FFMpegDriver.html\"><abbr title=\"FFMpeg\\Driver\\FFMpegDriver\">FFMpegDriver<\/abbr><\/a> $ffmpeg)","Sets the ffmpeg driver.",2],["FFMpeg::getFFMpegDriver","FFMpeg\\FFMpeg","FFMpeg\/FFMpeg.html#method_getFFMpegDriver","()","Gets the ffmpeg driver.",2],["FFMpeg::open","FFMpeg\\FFMpeg","FFMpeg\/FFMpeg.html#method_open","(string $pathfile)","Opens a file in order to be processed.",2],["FFMpeg::create","FFMpeg\\FFMpeg","FFMpeg\/FFMpeg.html#method_create","(array|<abbr title=\"Alchemy\\BinaryDriver\\ConfigurationInterface\">ConfigurationInterface<\/abbr> $configuration = array(), <abbr title=\"Psr\\Log\\LoggerInterface\">LoggerInterface<\/abbr> $logger = null, <a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $probe = null)","Creates a new FFMpeg instance.",2],["FFMpegServiceProvider::register","FFMpeg\\FFMpegServiceProvider","FFMpeg\/FFMpegServiceProvider.html#method_register","(<abbr title=\"Silex\\Application\">Application<\/abbr> $app)","",2],["FFMpegServiceProvider::boot","FFMpeg\\FFMpegServiceProvider","FFMpeg\/FFMpegServiceProvider.html#method_boot","(<abbr title=\"Silex\\Application\">Application<\/abbr> $app)","",2],["FFProbe::__construct","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method___construct","(<a href=\"FFMpeg\/Driver\/FFProbeDriver.html\"><abbr title=\"FFMpeg\\Driver\\FFProbeDriver\">FFProbeDriver<\/abbr><\/a> $ffprobe, <abbr title=\"Doctrine\\Common\\Cache\\Cache\">Cache<\/abbr> $cache)","",2],["FFProbe::getParser","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_getParser","()","",2],["FFProbe::setParser","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_setParser","(<a href=\"FFMpeg\/FFProbe\/OutputParserInterface.html\"><abbr title=\"FFMpeg\\FFProbe\\OutputParserInterface\">OutputParserInterface<\/abbr><\/a> $parser)","",2],["FFProbe::getFFProbeDriver","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_getFFProbeDriver","()","",2],["FFProbe::setFFProbeDriver","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_setFFProbeDriver","(<a href=\"FFMpeg\/Driver\/FFProbeDriver.html\"><abbr title=\"FFMpeg\\Driver\\FFProbeDriver\">FFProbeDriver<\/abbr><\/a> $ffprobe)","",2],["FFProbe::setOptionsTester","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_setOptionsTester","(<a href=\"FFMpeg\/FFProbe\/OptionsTesterInterface.html\"><abbr title=\"FFMpeg\\FFProbe\\OptionsTesterInterface\">OptionsTesterInterface<\/abbr><\/a> $tester)","",2],["FFProbe::getOptionsTester","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_getOptionsTester","()","",2],["FFProbe::setCache","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_setCache","(<abbr title=\"Doctrine\\Common\\Cache\\Cache\">Cache<\/abbr> $cache)","",2],["FFProbe::getCache","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_getCache","()","",2],["FFProbe::getMapper","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_getMapper","()","",2],["FFProbe::setMapper","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_setMapper","(<a href=\"FFMpeg\/FFProbe\/MapperInterface.html\"><abbr title=\"FFMpeg\\FFProbe\\MapperInterface\">MapperInterface<\/abbr><\/a> $mapper)","",2],["FFProbe::format","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_format","(string $pathfile)","",2],["FFProbe::streams","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_streams","(string $pathfile)","",2],["FFProbe::create","FFMpeg\\FFProbe","FFMpeg\/FFProbe.html#method_create","(array|<abbr title=\"Alchemy\\BinaryDriver\\ConfigurationInterface\">ConfigurationInterface<\/abbr> $configuration = array(), <abbr title=\"Psr\\Log\\LoggerInterface\">LoggerInterface<\/abbr> $logger = null, <abbr title=\"Doctrine\\Common\\Cache\\Cache\">Cache<\/abbr> $cache = null)","",2],["AbstractData::__construct","FFMpeg\\FFProbe\\DataMapping\\AbstractData","FFMpeg\/FFProbe\/DataMapping\/AbstractData.html#method___construct","(array $properties)","",2],["AbstractData::has","FFMpeg\\FFProbe\\DataMapping\\AbstractData","FFMpeg\/FFProbe\/DataMapping\/AbstractData.html#method_has","(string $property)","Returns true if data has property.",2],["AbstractData::get","FFMpeg\\FFProbe\\DataMapping\\AbstractData","FFMpeg\/FFProbe\/DataMapping\/AbstractData.html#method_get","(string $property)","Returns the property value given its name.",2],["AbstractData::set","FFMpeg\\FFProbe\\DataMapping\\AbstractData","FFMpeg\/FFProbe\/DataMapping\/AbstractData.html#method_set","(string $property, mixed $value)","Sets the property value given its name.",2],["AbstractData::keys","FFMpeg\\FFProbe\\DataMapping\\AbstractData","FFMpeg\/FFProbe\/DataMapping\/AbstractData.html#method_keys","()","Returns all property names.",2],["AbstractData::all","FFMpeg\\FFProbe\\DataMapping\\AbstractData","FFMpeg\/FFProbe\/DataMapping\/AbstractData.html#method_all","()","Returns all properties and their values.",2],["AbstractData::count","FFMpeg\\FFProbe\\DataMapping\\AbstractData","FFMpeg\/FFProbe\/DataMapping\/AbstractData.html#method_count","()","{@inheritdoc}",2],["Stream::isAudio","FFMpeg\\FFProbe\\DataMapping\\Stream","FFMpeg\/FFProbe\/DataMapping\/Stream.html#method_isAudio","()","Returns true if the stream is an audio stream.",2],["Stream::isVideo","FFMpeg\\FFProbe\\DataMapping\\Stream","FFMpeg\/FFProbe\/DataMapping\/Stream.html#method_isVideo","()","Returns true if the stream is a video stream.",2],["Stream::getDimensions","FFMpeg\\FFProbe\\DataMapping\\Stream","FFMpeg\/FFProbe\/DataMapping\/Stream.html#method_getDimensions","()","Returns the dimension of the video stream.",2],["StreamCollection::__construct","FFMpeg\\FFProbe\\DataMapping\\StreamCollection","FFMpeg\/FFProbe\/DataMapping\/StreamCollection.html#method___construct","(array $streams = array())","",2],["StreamCollection::first","FFMpeg\\FFProbe\\DataMapping\\StreamCollection","FFMpeg\/FFProbe\/DataMapping\/StreamCollection.html#method_first","()","Returns the first stream of the collection, null if",2],["StreamCollection::add","FFMpeg\\FFProbe\\DataMapping\\StreamCollection","FFMpeg\/FFProbe\/DataMapping\/StreamCollection.html#method_add","(<a href=\"FFMpeg\/FFProbe\/DataMapping\/Stream.html\"><abbr title=\"FFMpeg\\FFProbe\\DataMapping\\Stream\">Stream<\/abbr><\/a> $stream)","Adds a stream to the collection.",2],["StreamCollection::videos","FFMpeg\\FFProbe\\DataMapping\\StreamCollection","FFMpeg\/FFProbe\/DataMapping\/StreamCollection.html#method_videos","()","Returns a new StreamCollection with only video streams.",2],["StreamCollection::audios","FFMpeg\\FFProbe\\DataMapping\\StreamCollection","FFMpeg\/FFProbe\/DataMapping\/StreamCollection.html#method_audios","()","Returns a new StreamCollection with only audio streams.",2],["StreamCollection::count","FFMpeg\\FFProbe\\DataMapping\\StreamCollection","FFMpeg\/FFProbe\/DataMapping\/StreamCollection.html#method_count","()","{@inheritdoc}",2],["StreamCollection::all","FFMpeg\\FFProbe\\DataMapping\\StreamCollection","FFMpeg\/FFProbe\/DataMapping\/StreamCollection.html#method_all","()","Returns the array of contained streams.",2],["StreamCollection::getIterator","FFMpeg\\FFProbe\\DataMapping\\StreamCollection","FFMpeg\/FFProbe\/DataMapping\/StreamCollection.html#method_getIterator","()","{@inheritdoc}",2],["Mapper::map","FFMpeg\\FFProbe\\Mapper","FFMpeg\/FFProbe\/Mapper.html#method_map","(string $type, string $data)","Maps data given its type.",2],["MapperInterface::map","FFMpeg\\FFProbe\\MapperInterface","FFMpeg\/FFProbe\/MapperInterface.html#method_map","(string $type, string $data)","Maps data given its type.",2],["OptionsTester::__construct","FFMpeg\\FFProbe\\OptionsTester","FFMpeg\/FFProbe\/OptionsTester.html#method___construct","(<a href=\"FFMpeg\/Driver\/FFProbeDriver.html\"><abbr title=\"FFMpeg\\Driver\\FFProbeDriver\">FFProbeDriver<\/abbr><\/a> $ffprobe, <abbr title=\"Doctrine\\Common\\Cache\\Cache\">Cache<\/abbr> $cache)","",2],["OptionsTester::has","FFMpeg\\FFProbe\\OptionsTester","FFMpeg\/FFProbe\/OptionsTester.html#method_has","(string $name)","Tells if the given option is supported by ffprobe.",2],["OptionsTesterInterface::has","FFMpeg\\FFProbe\\OptionsTesterInterface","FFMpeg\/FFProbe\/OptionsTesterInterface.html#method_has","(string $name)","Tells if the given option is supported by ffprobe.",2],["OutputParser::parse","FFMpeg\\FFProbe\\OutputParser","FFMpeg\/FFProbe\/OutputParser.html#method_parse","(string $type, string $data)","Parses ffprobe raw output.",2],["OutputParserInterface::parse","FFMpeg\\FFProbe\\OutputParserInterface","FFMpeg\/FFProbe\/OutputParserInterface.html#method_parse","(string $type, string $data)","Parses ffprobe raw output.",2],["AudioFilterInterface::apply","FFMpeg\\Filters\\Audio\\AudioFilterInterface","FFMpeg\/Filters\/Audio\/AudioFilterInterface.html#method_apply","(<a href=\"FFMpeg\/Media\/Audio.html\"><abbr title=\"FFMpeg\\Media\\Audio\">Audio<\/abbr><\/a> $audio, <a href=\"FFMpeg\/Format\/AudioInterface.html\"><abbr title=\"FFMpeg\\Format\\AudioInterface\">AudioInterface<\/abbr><\/a> $format)","Applies the filter on the the Audio media given an",2],["AudioFilters::__construct","FFMpeg\\Filters\\Audio\\AudioFilters","FFMpeg\/Filters\/Audio\/AudioFilters.html#method___construct","(<a href=\"FFMpeg\/Media\/Audio.html\"><abbr title=\"FFMpeg\\Media\\Audio\">Audio<\/abbr><\/a> $media)","",2],["AudioFilters::resample","FFMpeg\\Filters\\Audio\\AudioFilters","FFMpeg\/Filters\/Audio\/AudioFilters.html#method_resample","(Integer $rate)","Resamples the audio file.",2],["AudioResamplableFilter::__construct","FFMpeg\\Filters\\Audio\\AudioResamplableFilter","FFMpeg\/Filters\/Audio\/AudioResamplableFilter.html#method___construct","($rate, $priority)","",2],["AudioResamplableFilter::getPriority","FFMpeg\\Filters\\Audio\\AudioResamplableFilter","FFMpeg\/Filters\/Audio\/AudioResamplableFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["AudioResamplableFilter::getRate","FFMpeg\\Filters\\Audio\\AudioResamplableFilter","FFMpeg\/Filters\/Audio\/AudioResamplableFilter.html#method_getRate","()","",2],["AudioResamplableFilter::apply","FFMpeg\\Filters\\Audio\\AudioResamplableFilter","FFMpeg\/Filters\/Audio\/AudioResamplableFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Audio.html\"><abbr title=\"FFMpeg\\Media\\Audio\">Audio<\/abbr><\/a> $audio, <a href=\"FFMpeg\/Format\/AudioInterface.html\"><abbr title=\"FFMpeg\\Format\\AudioInterface\">AudioInterface<\/abbr><\/a> $format)","Applies the filter on the the Audio media given an",2],["SimpleFilter::__construct","FFMpeg\\Filters\\Audio\\SimpleFilter","FFMpeg\/Filters\/Audio\/SimpleFilter.html#method___construct","(array $params, $priority)","",2],["SimpleFilter::getPriority","FFMpeg\\Filters\\Audio\\SimpleFilter","FFMpeg\/Filters\/Audio\/SimpleFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["SimpleFilter::apply","FFMpeg\\Filters\\Audio\\SimpleFilter","FFMpeg\/Filters\/Audio\/SimpleFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Audio.html\"><abbr title=\"FFMpeg\\Media\\Audio\">Audio<\/abbr><\/a> $audio, <a href=\"FFMpeg\/Format\/AudioInterface.html\"><abbr title=\"FFMpeg\\Format\\AudioInterface\">AudioInterface<\/abbr><\/a> $format)","Applies the filter on the the Audio media given an",2],["FilterInterface::getPriority","FFMpeg\\Filters\\FilterInterface","FFMpeg\/Filters\/FilterInterface.html#method_getPriority","()","Returns the priority of the filter.",2],["FiltersCollection::add","FFMpeg\\Filters\\FiltersCollection","FFMpeg\/Filters\/FiltersCollection.html#method_add","(<a href=\"FFMpeg\/Filters\/FilterInterface.html\"><abbr title=\"FFMpeg\\Filters\\FilterInterface\">FilterInterface<\/abbr><\/a> $filter)","",2],["FiltersCollection::count","FFMpeg\\Filters\\FiltersCollection","FFMpeg\/Filters\/FiltersCollection.html#method_count","()","{@inheritdoc}",2],["FiltersCollection::getIterator","FFMpeg\\Filters\\FiltersCollection","FFMpeg\/Filters\/FiltersCollection.html#method_getIterator","()","{@inheritdoc}",2],["DisplayRatioFixerFilter::__construct","FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter","FFMpeg\/Filters\/Frame\/DisplayRatioFixerFilter.html#method___construct","($priority)","",2],["DisplayRatioFixerFilter::getPriority","FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter","FFMpeg\/Filters\/Frame\/DisplayRatioFixerFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["DisplayRatioFixerFilter::apply","FFMpeg\\Filters\\Frame\\DisplayRatioFixerFilter","FFMpeg\/Filters\/Frame\/DisplayRatioFixerFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Frame.html\"><abbr title=\"FFMpeg\\Media\\Frame\">Frame<\/abbr><\/a> $frame)","",2],["FrameFilterInterface::apply","FFMpeg\\Filters\\Frame\\FrameFilterInterface","FFMpeg\/Filters\/Frame\/FrameFilterInterface.html#method_apply","(<a href=\"FFMpeg\/Media\/Frame.html\"><abbr title=\"FFMpeg\\Media\\Frame\">Frame<\/abbr><\/a> $frame)","",2],["FrameFilters::__construct","FFMpeg\\Filters\\Frame\\FrameFilters","FFMpeg\/Filters\/Frame\/FrameFilters.html#method___construct","(<a href=\"FFMpeg\/Media\/Frame.html\"><abbr title=\"FFMpeg\\Media\\Frame\">Frame<\/abbr><\/a> $frame)","",2],["FrameFilters::fixDisplayRatio","FFMpeg\\Filters\\Frame\\FrameFilters","FFMpeg\/Filters\/Frame\/FrameFilters.html#method_fixDisplayRatio","()","Fixes the display ratio of the output frame.",2],["ClipFilter::__construct","FFMpeg\\Filters\\Video\\ClipFilter","FFMpeg\/Filters\/Video\/ClipFilter.html#method___construct","(<a href=\"FFMpeg\/Coordinate\/TimeCode.html\"><abbr title=\"FFMpeg\\Coordinate\\TimeCode\">TimeCode<\/abbr><\/a> $start, <a href=\"FFMpeg\/Coordinate\/TimeCode.html\"><abbr title=\"FFMpeg\\Coordinate\\TimeCode\">TimeCode<\/abbr><\/a> $duration = null, $priority)","",2],["ClipFilter::getPriority","FFMpeg\\Filters\\Video\\ClipFilter","FFMpeg\/Filters\/Video\/ClipFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["ClipFilter::getStart","FFMpeg\\Filters\\Video\\ClipFilter","FFMpeg\/Filters\/Video\/ClipFilter.html#method_getStart","()","",2],["ClipFilter::getDuration","FFMpeg\\Filters\\Video\\ClipFilter","FFMpeg\/Filters\/Video\/ClipFilter.html#method_getDuration","()","",2],["ClipFilter::apply","FFMpeg\\Filters\\Video\\ClipFilter","FFMpeg\/Filters\/Video\/ClipFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $video, <a href=\"FFMpeg\/Format\/VideoInterface.html\"><abbr title=\"FFMpeg\\Format\\VideoInterface\">VideoInterface<\/abbr><\/a> $format)","Applies the filter on the the Video media given an",2],["CustomFilter::__construct","FFMpeg\\Filters\\Video\\CustomFilter","FFMpeg\/Filters\/Video\/CustomFilter.html#method___construct","(string $filter, int $priority)","A custom filter, useful if you want to build complex",2],["CustomFilter::getPriority","FFMpeg\\Filters\\Video\\CustomFilter","FFMpeg\/Filters\/Video\/CustomFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["CustomFilter::apply","FFMpeg\\Filters\\Video\\CustomFilter","FFMpeg\/Filters\/Video\/CustomFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $video, <a href=\"FFMpeg\/Format\/VideoInterface.html\"><abbr title=\"FFMpeg\\Format\\VideoInterface\">VideoInterface<\/abbr><\/a> $format)","Applies the filter on the the Video media given an",2],["FrameRateFilter::__construct","FFMpeg\\Filters\\Video\\FrameRateFilter","FFMpeg\/Filters\/Video\/FrameRateFilter.html#method___construct","(<a href=\"FFMpeg\/Coordinate\/FrameRate.html\"><abbr title=\"FFMpeg\\Coordinate\\FrameRate\">FrameRate<\/abbr><\/a> $rate, $gop, $priority)","",2],["FrameRateFilter::getPriority","FFMpeg\\Filters\\Video\\FrameRateFilter","FFMpeg\/Filters\/Video\/FrameRateFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["FrameRateFilter::getFrameRate","FFMpeg\\Filters\\Video\\FrameRateFilter","FFMpeg\/Filters\/Video\/FrameRateFilter.html#method_getFrameRate","()","Returns the frame rate.",2],["FrameRateFilter::getGOP","FFMpeg\\Filters\\Video\\FrameRateFilter","FFMpeg\/Filters\/Video\/FrameRateFilter.html#method_getGOP","()","Returns the GOP size.",2],["FrameRateFilter::apply","FFMpeg\\Filters\\Video\\FrameRateFilter","FFMpeg\/Filters\/Video\/FrameRateFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $video, <a href=\"FFMpeg\/Format\/VideoInterface.html\"><abbr title=\"FFMpeg\\Format\\VideoInterface\">VideoInterface<\/abbr><\/a> $format)","Applies the filter on the the Video media given an",2],["ResizeFilter::__construct","FFMpeg\\Filters\\Video\\ResizeFilter","FFMpeg\/Filters\/Video\/ResizeFilter.html#method___construct","(<a href=\"FFMpeg\/Coordinate\/Dimension.html\"><abbr title=\"FFMpeg\\Coordinate\\Dimension\">Dimension<\/abbr><\/a> $dimension, $mode = self::RESIZEMODE_FIT, $forceStandards = true, $priority)","",2],["ResizeFilter::getPriority","FFMpeg\\Filters\\Video\\ResizeFilter","FFMpeg\/Filters\/Video\/ResizeFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["ResizeFilter::getDimension","FFMpeg\\Filters\\Video\\ResizeFilter","FFMpeg\/Filters\/Video\/ResizeFilter.html#method_getDimension","()","",2],["ResizeFilter::getMode","FFMpeg\\Filters\\Video\\ResizeFilter","FFMpeg\/Filters\/Video\/ResizeFilter.html#method_getMode","()","",2],["ResizeFilter::areStandardsForced","FFMpeg\\Filters\\Video\\ResizeFilter","FFMpeg\/Filters\/Video\/ResizeFilter.html#method_areStandardsForced","()","",2],["ResizeFilter::apply","FFMpeg\\Filters\\Video\\ResizeFilter","FFMpeg\/Filters\/Video\/ResizeFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $video, <a href=\"FFMpeg\/Format\/VideoInterface.html\"><abbr title=\"FFMpeg\\Format\\VideoInterface\">VideoInterface<\/abbr><\/a> $format)","Applies the filter on the the Video media given an",2],["RotateFilter::__construct","FFMpeg\\Filters\\Video\\RotateFilter","FFMpeg\/Filters\/Video\/RotateFilter.html#method___construct","($angle, $priority)","",2],["RotateFilter::getPriority","FFMpeg\\Filters\\Video\\RotateFilter","FFMpeg\/Filters\/Video\/RotateFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["RotateFilter::getAngle","FFMpeg\\Filters\\Video\\RotateFilter","FFMpeg\/Filters\/Video\/RotateFilter.html#method_getAngle","()","",2],["RotateFilter::apply","FFMpeg\\Filters\\Video\\RotateFilter","FFMpeg\/Filters\/Video\/RotateFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $video, <a href=\"FFMpeg\/Format\/VideoInterface.html\"><abbr title=\"FFMpeg\\Format\\VideoInterface\">VideoInterface<\/abbr><\/a> $format)","Applies the filter on the the Video media given an",2],["SynchronizeFilter::__construct","FFMpeg\\Filters\\Video\\SynchronizeFilter","FFMpeg\/Filters\/Video\/SynchronizeFilter.html#method___construct","($priority = 12)","",2],["SynchronizeFilter::getPriority","FFMpeg\\Filters\\Video\\SynchronizeFilter","FFMpeg\/Filters\/Video\/SynchronizeFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["SynchronizeFilter::apply","FFMpeg\\Filters\\Video\\SynchronizeFilter","FFMpeg\/Filters\/Video\/SynchronizeFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $video, <a href=\"FFMpeg\/Format\/VideoInterface.html\"><abbr title=\"FFMpeg\\Format\\VideoInterface\">VideoInterface<\/abbr><\/a> $format)","Applies the filter on the the Video media given an",2],["VideoFilterInterface::apply","FFMpeg\\Filters\\Video\\VideoFilterInterface","FFMpeg\/Filters\/Video\/VideoFilterInterface.html#method_apply","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $video, <a href=\"FFMpeg\/Format\/VideoInterface.html\"><abbr title=\"FFMpeg\\Format\\VideoInterface\">VideoInterface<\/abbr><\/a> $format)","Applies the filter on the the Video media given an",2],["VideoFilters::__construct","FFMpeg\\Filters\\Video\\VideoFilters","FFMpeg\/Filters\/Video\/VideoFilters.html#method___construct","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $media)","",2],["VideoFilters::resize","FFMpeg\\Filters\\Video\\VideoFilters","FFMpeg\/Filters\/Video\/VideoFilters.html#method_resize","(<a href=\"FFMpeg\/Coordinate\/Dimension.html\"><abbr title=\"FFMpeg\\Coordinate\\Dimension\">Dimension<\/abbr><\/a> $dimension, string $mode = ResizeFilter::RESIZEMODE_FIT, Boolean $forceStandards = true)","Resizes a video to a given dimension.",2],["VideoFilters::framerate","FFMpeg\\Filters\\Video\\VideoFilters","FFMpeg\/Filters\/Video\/VideoFilters.html#method_framerate","(<a href=\"FFMpeg\/Coordinate\/FrameRate.html\"><abbr title=\"FFMpeg\\Coordinate\\FrameRate\">FrameRate<\/abbr><\/a> $framerate, <abbr title=\"FFMpeg\\Filters\\Video\\type\">type<\/abbr> $gop)","Changes the video framerate.",2],["VideoFilters::synchronize","FFMpeg\\Filters\\Video\\VideoFilters","FFMpeg\/Filters\/Video\/VideoFilters.html#method_synchronize","()","Synchronizes audio and video.",2],["VideoFilters::clip","FFMpeg\\Filters\\Video\\VideoFilters","FFMpeg\/Filters\/Video\/VideoFilters.html#method_clip","(<a href=\"FFMpeg\/Coordinate\/TimeCode.html\"><abbr title=\"FFMpeg\\Coordinate\\TimeCode\">TimeCode<\/abbr><\/a> $start, <a href=\"FFMpeg\/Coordinate\/TimeCode.html\"><abbr title=\"FFMpeg\\Coordinate\\TimeCode\">TimeCode<\/abbr><\/a> $duration = null)","Clips (cuts) the video.",2],["VideoFilters::audioResample","FFMpeg\\Filters\\Video\\VideoFilters","FFMpeg\/Filters\/Video\/VideoFilters.html#method_audioResample","(Integer $rate)","Resamples the audio file.",2],["VideoFilters::rotate","FFMpeg\\Filters\\Video\\VideoFilters","FFMpeg\/Filters\/Video\/VideoFilters.html#method_rotate","($angle)","",2],["VideoFilters::watermark","FFMpeg\\Filters\\Video\\VideoFilters","FFMpeg\/Filters\/Video\/VideoFilters.html#method_watermark","(string $imagePath, array $coordinates = array())","",2],["WatermarkFilter::__construct","FFMpeg\\Filters\\Video\\WatermarkFilter","FFMpeg\/Filters\/Video\/WatermarkFilter.html#method___construct","($watermarkPath, array $coordinates = array(), $priority)","",2],["WatermarkFilter::getPriority","FFMpeg\\Filters\\Video\\WatermarkFilter","FFMpeg\/Filters\/Video\/WatermarkFilter.html#method_getPriority","()","Returns the priority of the filter.",2],["WatermarkFilter::apply","FFMpeg\\Filters\\Video\\WatermarkFilter","FFMpeg\/Filters\/Video\/WatermarkFilter.html#method_apply","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $video, <a href=\"FFMpeg\/Format\/VideoInterface.html\"><abbr title=\"FFMpeg\\Format\\VideoInterface\">VideoInterface<\/abbr><\/a> $format)","Applies the filter on the the Video media given an",2],["AudioInterface::getAudioKiloBitrate","FFMpeg\\Format\\AudioInterface","FFMpeg\/Format\/AudioInterface.html#method_getAudioKiloBitrate","()","Gets the audio kiloBitrate value.",2],["AudioInterface::getAudioChannels","FFMpeg\\Format\\AudioInterface","FFMpeg\/Format\/AudioInterface.html#method_getAudioChannels","()","Gets the audio channels value.",2],["AudioInterface::getAudioCodec","FFMpeg\\Format\\AudioInterface","FFMpeg\/Format\/AudioInterface.html#method_getAudioCodec","()","Returns the audio codec.",2],["AudioInterface::getAvailableAudioCodecs","FFMpeg\\Format\\AudioInterface","FFMpeg\/Format\/AudioInterface.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["Aac::__construct","FFMpeg\\Format\\Audio\\Aac","FFMpeg\/Format\/Audio\/Aac.html#method___construct","()","",2],["Aac::getAvailableAudioCodecs","FFMpeg\\Format\\Audio\\Aac","FFMpeg\/Format\/Audio\/Aac.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["DefaultAudio::getExtraParams","FFMpeg\\Format\\Audio\\DefaultAudio","FFMpeg\/Format\/Audio\/DefaultAudio.html#method_getExtraParams","()","Returns an array of extra parameters to add to ffmpeg",2],["DefaultAudio::getAudioCodec","FFMpeg\\Format\\Audio\\DefaultAudio","FFMpeg\/Format\/Audio\/DefaultAudio.html#method_getAudioCodec","()","Returns the audio codec.",2],["DefaultAudio::setAudioCodec","FFMpeg\\Format\\Audio\\DefaultAudio","FFMpeg\/Format\/Audio\/DefaultAudio.html#method_setAudioCodec","(string $audioCodec)","Sets the audio codec, Should be in the available ones,",2],["DefaultAudio::getAudioKiloBitrate","FFMpeg\\Format\\Audio\\DefaultAudio","FFMpeg\/Format\/Audio\/DefaultAudio.html#method_getAudioKiloBitrate","()","Gets the audio kiloBitrate value.",2],["DefaultAudio::setAudioKiloBitrate","FFMpeg\\Format\\Audio\\DefaultAudio","FFMpeg\/Format\/Audio\/DefaultAudio.html#method_setAudioKiloBitrate","(integer $kiloBitrate)","Sets the kiloBitrate value.",2],["DefaultAudio::getAudioChannels","FFMpeg\\Format\\Audio\\DefaultAudio","FFMpeg\/Format\/Audio\/DefaultAudio.html#method_getAudioChannels","()","Gets the audio channels value.",2],["DefaultAudio::setAudioChannels","FFMpeg\\Format\\Audio\\DefaultAudio","FFMpeg\/Format\/Audio\/DefaultAudio.html#method_setAudioChannels","(integer $channels)","Sets the channels value.",2],["DefaultAudio::createProgressListener","FFMpeg\\Format\\Audio\\DefaultAudio","FFMpeg\/Format\/Audio\/DefaultAudio.html#method_createProgressListener","(<a href=\"FFMpeg\/Media\/MediaTypeInterface.html\"><abbr title=\"FFMpeg\\Media\\MediaTypeInterface\">MediaTypeInterface<\/abbr><\/a> $media, <a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $ffprobe, Integer $pass, Integer $total)","Creates the progress listener.",2],["DefaultAudio::getPasses","FFMpeg\\Format\\Audio\\DefaultAudio","FFMpeg\/Format\/Audio\/DefaultAudio.html#method_getPasses","()","Returns the number of passes.",2],["Flac::__construct","FFMpeg\\Format\\Audio\\Flac","FFMpeg\/Format\/Audio\/Flac.html#method___construct","()","",2],["Flac::getAvailableAudioCodecs","FFMpeg\\Format\\Audio\\Flac","FFMpeg\/Format\/Audio\/Flac.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["Mp3::__construct","FFMpeg\\Format\\Audio\\Mp3","FFMpeg\/Format\/Audio\/Mp3.html#method___construct","()","",2],["Mp3::getAvailableAudioCodecs","FFMpeg\\Format\\Audio\\Mp3","FFMpeg\/Format\/Audio\/Mp3.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["Vorbis::__construct","FFMpeg\\Format\\Audio\\Vorbis","FFMpeg\/Format\/Audio\/Vorbis.html#method___construct","()","",2],["Vorbis::getExtraParams","FFMpeg\\Format\\Audio\\Vorbis","FFMpeg\/Format\/Audio\/Vorbis.html#method_getExtraParams","()","Returns an array of extra parameters to add to ffmpeg",2],["Vorbis::getAvailableAudioCodecs","FFMpeg\\Format\\Audio\\Vorbis","FFMpeg\/Format\/Audio\/Vorbis.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["Wav::__construct","FFMpeg\\Format\\Audio\\Wav","FFMpeg\/Format\/Audio\/Wav.html#method___construct","()","",2],["Wav::getAvailableAudioCodecs","FFMpeg\\Format\\Audio\\Wav","FFMpeg\/Format\/Audio\/Wav.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["FormatInterface::getPasses","FFMpeg\\Format\\FormatInterface","FFMpeg\/Format\/FormatInterface.html#method_getPasses","()","Returns the number of passes.",2],["FormatInterface::getExtraParams","FFMpeg\\Format\\FormatInterface","FFMpeg\/Format\/FormatInterface.html#method_getExtraParams","()","Returns an array of extra parameters to add to ffmpeg",2],["AbstractProgressListener::__construct","FFMpeg\\Format\\ProgressListener\\AbstractProgressListener","FFMpeg\/Format\/ProgressListener\/AbstractProgressListener.html#method___construct","(<a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $ffprobe, string $pathfile, integer $currentPass, integer $totalPass)","",2],["AbstractProgressListener::getFFProbe","FFMpeg\\Format\\ProgressListener\\AbstractProgressListener","FFMpeg\/Format\/ProgressListener\/AbstractProgressListener.html#method_getFFProbe","()","",2],["AbstractProgressListener::getFilePath","FFMpeg\\Format\\ProgressListener\\AbstractProgressListener","FFMpeg\/Format\/ProgressListener\/AbstractProgressListener.html#method_getPathfile","()","",2],["AbstractProgressListener::getCurrentPass","FFMpeg\\Format\\ProgressListener\\AbstractProgressListener","FFMpeg\/Format\/ProgressListener\/AbstractProgressListener.html#method_getCurrentPass","()","",2],["AbstractProgressListener::getTotalPass","FFMpeg\\Format\\ProgressListener\\AbstractProgressListener","FFMpeg\/Format\/ProgressListener\/AbstractProgressListener.html#method_getTotalPass","()","",2],["AbstractProgressListener::handle","FFMpeg\\Format\\ProgressListener\\AbstractProgressListener","FFMpeg\/Format\/ProgressListener\/AbstractProgressListener.html#method_handle","($type, $data)","{@inheritdoc}",2],["AbstractProgressListener::forwardedEvents","FFMpeg\\Format\\ProgressListener\\AbstractProgressListener","FFMpeg\/Format\/ProgressListener\/AbstractProgressListener.html#method_forwardedEvents","()","{@inheritdoc}",2],["AudioProgressListener::getPattern","FFMpeg\\Format\\ProgressListener\\AudioProgressListener","FFMpeg\/Format\/ProgressListener\/AudioProgressListener.html#method_getPattern","()","",2],["VideoProgressListener::getPattern","FFMpeg\\Format\\ProgressListener\\VideoProgressListener","FFMpeg\/Format\/ProgressListener\/VideoProgressListener.html#method_getPattern","()","",2],["ProgressableInterface::createProgressListener","FFMpeg\\Format\\ProgressableInterface","FFMpeg\/Format\/ProgressableInterface.html#method_createProgressListener","(<a href=\"FFMpeg\/Media\/MediaTypeInterface.html\"><abbr title=\"FFMpeg\\Media\\MediaTypeInterface\">MediaTypeInterface<\/abbr><\/a> $media, <a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $ffprobe, Integer $pass, Integer $total)","Creates the progress listener.",2],["VideoInterface::getKiloBitrate","FFMpeg\\Format\\VideoInterface","FFMpeg\/Format\/VideoInterface.html#method_getKiloBitrate","()","Gets the kiloBitrate value.",2],["VideoInterface::getModulus","FFMpeg\\Format\\VideoInterface","FFMpeg\/Format\/VideoInterface.html#method_getModulus","()","Returns the modulus used by the Resizable video.",2],["VideoInterface::getVideoCodec","FFMpeg\\Format\\VideoInterface","FFMpeg\/Format\/VideoInterface.html#method_getVideoCodec","()","Returns the video codec.",2],["VideoInterface::supportBFrames","FFMpeg\\Format\\VideoInterface","FFMpeg\/Format\/VideoInterface.html#method_supportBFrames","()","Returns true if the current format supports B-Frames.",2],["VideoInterface::getAvailableVideoCodecs","FFMpeg\\Format\\VideoInterface","FFMpeg\/Format\/VideoInterface.html#method_getAvailableVideoCodecs","()","Returns the list of available video codecs for this",2],["DefaultVideo::getKiloBitrate","FFMpeg\\Format\\Video\\DefaultVideo","FFMpeg\/Format\/Video\/DefaultVideo.html#method_getKiloBitrate","()","Gets the kiloBitrate value.",2],["DefaultVideo::setKiloBitrate","FFMpeg\\Format\\Video\\DefaultVideo","FFMpeg\/Format\/Video\/DefaultVideo.html#method_setKiloBitrate","(integer $kiloBitrate)","Sets the kiloBitrate value.",2],["DefaultVideo::getVideoCodec","FFMpeg\\Format\\Video\\DefaultVideo","FFMpeg\/Format\/Video\/DefaultVideo.html#method_getVideoCodec","()","Returns the video codec.",2],["DefaultVideo::setVideoCodec","FFMpeg\\Format\\Video\\DefaultVideo","FFMpeg\/Format\/Video\/DefaultVideo.html#method_setVideoCodec","(string $videoCodec)","Sets the video codec, Should be in the available ones,",2],["DefaultVideo::getModulus","FFMpeg\\Format\\Video\\DefaultVideo","FFMpeg\/Format\/Video\/DefaultVideo.html#method_getModulus","()","",2],["DefaultVideo::createProgressListener","FFMpeg\\Format\\Video\\DefaultVideo","FFMpeg\/Format\/Video\/DefaultVideo.html#method_createProgressListener","(<a href=\"FFMpeg\/Media\/MediaTypeInterface.html\"><abbr title=\"FFMpeg\\Media\\MediaTypeInterface\">MediaTypeInterface<\/abbr><\/a> $media, <a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $ffprobe, Integer $pass, Integer $total)","Creates the progress listener.",2],["Ogg::__construct","FFMpeg\\Format\\Video\\Ogg","FFMpeg\/Format\/Video\/Ogg.html#method___construct","($audioCodec = &#039;libvorbis&#039;, $videoCodec = &#039;libtheora&#039;)","",2],["Ogg::supportBFrames","FFMpeg\\Format\\Video\\Ogg","FFMpeg\/Format\/Video\/Ogg.html#method_supportBFrames","()","Returns true if the current format supports B-Frames.",2],["Ogg::getAvailableAudioCodecs","FFMpeg\\Format\\Video\\Ogg","FFMpeg\/Format\/Video\/Ogg.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["Ogg::getAvailableVideoCodecs","FFMpeg\\Format\\Video\\Ogg","FFMpeg\/Format\/Video\/Ogg.html#method_getAvailableVideoCodecs","()","Returns the list of available video codecs for this",2],["WMV::__construct","FFMpeg\\Format\\Video\\WMV","FFMpeg\/Format\/Video\/WMV.html#method___construct","($audioCodec = &#039;wmav2&#039;, $videoCodec = &#039;wmv2&#039;)","",2],["WMV::supportBFrames","FFMpeg\\Format\\Video\\WMV","FFMpeg\/Format\/Video\/WMV.html#method_supportBFrames","()","Returns true if the current format supports B-Frames.",2],["WMV::getAvailableAudioCodecs","FFMpeg\\Format\\Video\\WMV","FFMpeg\/Format\/Video\/WMV.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["WMV::getAvailableVideoCodecs","FFMpeg\\Format\\Video\\WMV","FFMpeg\/Format\/Video\/WMV.html#method_getAvailableVideoCodecs","()","Returns the list of available video codecs for this",2],["WMV3::__construct","FFMpeg\\Format\\Video\\WMV3","FFMpeg\/Format\/Video\/WMV3.html#method___construct","($audioCodec = &#039;wmav3&#039;, $videoCodec = &#039;wmv3&#039;)","",2],["WMV3::supportBFrames","FFMpeg\\Format\\Video\\WMV3","FFMpeg\/Format\/Video\/WMV3.html#method_supportBFrames","()","Returns true if the current format supports B-Frames.",2],["WMV3::getAvailableAudioCodecs","FFMpeg\\Format\\Video\\WMV3","FFMpeg\/Format\/Video\/WMV3.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["WMV3::getAvailableVideoCodecs","FFMpeg\\Format\\Video\\WMV3","FFMpeg\/Format\/Video\/WMV3.html#method_getAvailableVideoCodecs","()","Returns the list of available video codecs for this",2],["WebM::__construct","FFMpeg\\Format\\Video\\WebM","FFMpeg\/Format\/Video\/WebM.html#method___construct","($audioCodec = &#039;libvorbis&#039;, $videoCodec = &#039;libvpx&#039;)","",2],["WebM::supportBFrames","FFMpeg\\Format\\Video\\WebM","FFMpeg\/Format\/Video\/WebM.html#method_supportBFrames","()","Returns true if the current format supports B-Frames.",2],["WebM::getExtraParams","FFMpeg\\Format\\Video\\WebM","FFMpeg\/Format\/Video\/WebM.html#method_getExtraParams","()","Returns an array of extra parameters to add to ffmpeg",2],["WebM::getAvailableAudioCodecs","FFMpeg\\Format\\Video\\WebM","FFMpeg\/Format\/Video\/WebM.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["WebM::getAvailableVideoCodecs","FFMpeg\\Format\\Video\\WebM","FFMpeg\/Format\/Video\/WebM.html#method_getAvailableVideoCodecs","()","Returns the list of available video codecs for this",2],["X264::__construct","FFMpeg\\Format\\Video\\X264","FFMpeg\/Format\/Video\/X264.html#method___construct","($audioCodec = &#039;libfaac&#039;, $videoCodec = &#039;libx264&#039;)","",2],["X264::supportBFrames","FFMpeg\\Format\\Video\\X264","FFMpeg\/Format\/Video\/X264.html#method_supportBFrames","()","Returns true if the current format supports B-Frames.",2],["X264::setBFramesSupport","FFMpeg\\Format\\Video\\X264","FFMpeg\/Format\/Video\/X264.html#method_setBFramesSupport","(<abbr title=\"FFMpeg\\Format\\Video\\$support\">$support<\/abbr> $support)","",2],["X264::getAvailableAudioCodecs","FFMpeg\\Format\\Video\\X264","FFMpeg\/Format\/Video\/X264.html#method_getAvailableAudioCodecs","()","Returns the list of available audio codecs for this",2],["X264::getAvailableVideoCodecs","FFMpeg\\Format\\Video\\X264","FFMpeg\/Format\/Video\/X264.html#method_getAvailableVideoCodecs","()","Returns the list of available video codecs for this",2],["X264::getPasses","FFMpeg\\Format\\Video\\X264","FFMpeg\/Format\/Video\/X264.html#method_getPasses","()","Returns the number of passes.",2],["X264::getModulus","FFMpeg\\Format\\Video\\X264","FFMpeg\/Format\/Video\/X264.html#method_getModulus","()","",2],["AbstractMediaType::__construct","FFMpeg\\Media\\AbstractMediaType","FFMpeg\/Media\/AbstractMediaType.html#method___construct","($pathfile, <a href=\"FFMpeg\/Driver\/FFMpegDriver.html\"><abbr title=\"FFMpeg\\Driver\\FFMpegDriver\">FFMpegDriver<\/abbr><\/a> $driver, <a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $ffprobe)","",2],["AbstractMediaType::getFFMpegDriver","FFMpeg\\Media\\AbstractMediaType","FFMpeg\/Media\/AbstractMediaType.html#method_getFFMpegDriver","()","",2],["AbstractMediaType::setFFMpegDriver","FFMpeg\\Media\\AbstractMediaType","FFMpeg\/Media\/AbstractMediaType.html#method_setFFMpegDriver","(<a href=\"FFMpeg\/Driver\/FFMpegDriver.html\"><abbr title=\"FFMpeg\\Driver\\FFMpegDriver\">FFMpegDriver<\/abbr><\/a> $driver)","",2],["AbstractMediaType::getFFProbe","FFMpeg\\Media\\AbstractMediaType","FFMpeg\/Media\/AbstractMediaType.html#method_getFFProbe","()","",2],["AbstractMediaType::setFFProbe","FFMpeg\\Media\\AbstractMediaType","FFMpeg\/Media\/AbstractMediaType.html#method_setFFProbe","(<a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $ffprobe)","",2],["AbstractMediaType::getFilePath","FFMpeg\\Media\\AbstractMediaType","FFMpeg\/Media\/AbstractMediaType.html#method_getPathfile","()","",2],["AbstractMediaType::setFiltersCollection","FFMpeg\\Media\\AbstractMediaType","FFMpeg\/Media\/AbstractMediaType.html#method_setFiltersCollection","(<a href=\"FFMpeg\/Filters\/FiltersCollection.html\"><abbr title=\"FFMpeg\\Filters\\FiltersCollection\">FiltersCollection<\/abbr><\/a> $filters)","",2],["AbstractMediaType::getFiltersCollection","FFMpeg\\Media\\AbstractMediaType","FFMpeg\/Media\/AbstractMediaType.html#method_getFiltersCollection","()","",2],["AbstractStreamableMedia::getStreams","FFMpeg\\Media\\AbstractStreamableMedia","FFMpeg\/Media\/AbstractStreamableMedia.html#method_getStreams","()","",2],["AbstractStreamableMedia::getFormat","FFMpeg\\Media\\AbstractStreamableMedia","FFMpeg\/Media\/AbstractStreamableMedia.html#method_getFormat","()","",2],["Audio::filters","FFMpeg\\Media\\Audio","FFMpeg\/Media\/Audio.html#method_filters","()","Returns the available filters.",2],["Audio::addFilter","FFMpeg\\Media\\Audio","FFMpeg\/Media\/Audio.html#method_addFilter","(<a href=\"FFMpeg\/Filters\/FilterInterface.html\"><abbr title=\"FFMpeg\\Filters\\FilterInterface\">FilterInterface<\/abbr><\/a> $filter)","{@inheritdoc}",2],["Audio::save","FFMpeg\\Media\\Audio","FFMpeg\/Media\/Audio.html#method_save","(<a href=\"FFMpeg\/Format\/FormatInterface.html\"><abbr title=\"FFMpeg\\Format\\FormatInterface\">FormatInterface<\/abbr><\/a> $format, string $outputPathfile)","Exports the audio in the desired format, applies registered",2],["Frame::__construct","FFMpeg\\Media\\Frame","FFMpeg\/Media\/Frame.html#method___construct","(<a href=\"FFMpeg\/Media\/Video.html\"><abbr title=\"FFMpeg\\Media\\Video\">Video<\/abbr><\/a> $video, <a href=\"FFMpeg\/Driver\/FFMpegDriver.html\"><abbr title=\"FFMpeg\\Driver\\FFMpegDriver\">FFMpegDriver<\/abbr><\/a> $driver, <a href=\"FFMpeg\/FFProbe.html\"><abbr title=\"FFMpeg\\FFProbe\">FFProbe<\/abbr><\/a> $ffprobe, <a href=\"FFMpeg\/Coordinate\/TimeCode.html\"><abbr title=\"FFMpeg\\Coordinate\\TimeCode\">TimeCode<\/abbr><\/a> $timecode)","",2],["Frame::getVideo","FFMpeg\\Media\\Frame","FFMpeg\/Media\/Frame.html#method_getVideo","()","Returns the video related to the frame.",2],["Frame::filters","FFMpeg\\Media\\Frame","FFMpeg\/Media\/Frame.html#method_filters","()","Returns the available filters.",2],["Frame::addFilter","FFMpeg\\Media\\Frame","FFMpeg\/Media\/Frame.html#method_addFilter","(<a href=\"FFMpeg\/Filters\/Frame\/FrameFilterInterface.html\"><abbr title=\"FFMpeg\\Filters\\Frame\\FrameFilterInterface\">FrameFilterInterface<\/abbr><\/a> $filter)","{@inheritdoc}",2],["Frame::getTimeCode","FFMpeg\\Media\\Frame","FFMpeg\/Media\/Frame.html#method_getTimeCode","()","",2],["Frame::save","FFMpeg\\Media\\Frame","FFMpeg\/Media\/Frame.html#method_save","(string $pathfile, Boolean $accurate = false)","Saves the frame in the given filename.",2],["MediaTypeInterface::filters","FFMpeg\\Media\\MediaTypeInterface","FFMpeg\/Media\/MediaTypeInterface.html#method_filters","()","Returns the available filters.",2],["MediaTypeInterface::getFilePath","FFMpeg\\Media\\MediaTypeInterface","FFMpeg\/Media\/MediaTypeInterface.html#method_getPathfile","()","",2],["Video::filters","FFMpeg\\Media\\Video","FFMpeg\/Media\/Video.html#method_filters","()","Returns the available filters.",2],["Video::addFilter","FFMpeg\\Media\\Video","FFMpeg\/Media\/Video.html#method_addFilter","(<a href=\"FFMpeg\/Filters\/FilterInterface.html\"><abbr title=\"FFMpeg\\Filters\\FilterInterface\">FilterInterface<\/abbr><\/a> $filter)","{@inheritdoc}",2],["Video::save","FFMpeg\\Media\\Video","FFMpeg\/Media\/Video.html#method_save","(<a href=\"FFMpeg\/Format\/FormatInterface.html\"><abbr title=\"FFMpeg\\Format\\FormatInterface\">FormatInterface<\/abbr><\/a> $format, string $outputPathfile)","Exports the video in the desired format, applies registered",2],["Video::frame","FFMpeg\\Media\\Video","FFMpeg\/Media\/Video.html#method_frame","(<a href=\"FFMpeg\/Coordinate\/TimeCode.html\"><abbr title=\"FFMpeg\\Coordinate\\TimeCode\">TimeCode<\/abbr><\/a> $at)","Gets the frame at timecode.",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']